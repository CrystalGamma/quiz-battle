# Anwendungsidee
Der gewählte Projektauftrag war die Erstellung eines webbasierten Spiels, das den Einsatz von Datenbanken in komplexen Anwendungen demonstrieren kann.

Die Schlüsselanforderungen waren dabei:
• Mehrbenutzerfähigkeit
• Pausierbarkeit des Spielgeschehens
• Accountverwaltung
• Aufstellung einer Spielerrangfolge

Während zu Beginn der Themenfindung eine Umsetzung eines Managementspiels wie OGame oder Die Stämme diskutiert wurde, wurden diese Vorschläge später, insbesondere im Hinblick auf die Aspekte der Pausierbarkeit und der Rangfolgeliste zugunsten, verworfen.
Stattdessen wurde sich für die Umsetzung eines kompetitiven Quizspiels ähnlich zu der bekannte Applikation Quizduell entscheiden.

# Aufbau der Anwendungsoberfläche
Die Ansichten der Nutzeroberfläche sind ähnlich miteinander verbunden wie in der Inspiration Quizduell.

Es gibt eine Startansicht, von der die Spieler auf ihre Spiele zugreifen können, eine Spielansicht, in der das Quiz an sich stattfindet, und eine Statistikseite für jeden Spieler.
Im Gegensatz zu Quizduell erlaubt es dieses Projekt, in den Teil der Statistik anderer Spieler, die gemeinsamen Spielen basieren, Einsicht zu nehmen.
Zudem werden, wie gefordert, die Spieler in einer Rangliste aufgeführt.

# Technischer Aufbau
Die Anwendung aus diesem Projekt besteht aus zwei großen Teilen, die über eine definierte Schnittstelle miteinander kommunizieren.

Das Back-End wurde entsprechend den Vorgaben in PHP programmiert und dient dem Zugriff auf die Datenbank.
Es bietet die Grundlage für die Nutzung des Spiels und ist das erste, mit dem Nutzer und Browser interagieren.

Darauf baut das Front-End auf, das die Nutzeroberfläche mit vielfältigen Interaktionsmöglichkeiten erweitert.
Insbesondere alle Aktionen, die Nutzerauthorisierung benötigen, werden vom Front-End angestoßen.

# Datenbankentwurf
Beim Entwurf der Datenbank wurde auf eine gute Übereinstimmung mit dem relationalen Modell geachtet.
Die Tabellen wurden in dritter Normalform entworfen.

Da in einer relationalen Datenbanken schwache Entitäten mithilfe zusammengesetzter Schlüssel sehr gut unterstützt werden, konnte die Anzahl der zu verwaltenden starken Entitäten stark reduziert werden. Die Gesamtzahl an eigenständigen Entitätstypen im ganzen Projekt beträgt 3.

Da marktübliche relationale Datenbankmanagementsysteme wie das im Projekt eingesetzte MySQL/MariaDB äußerst mächtige Abfragemöglichkeiten bieten, wurde ein früherer Entwurf, der vorsah, verschiedene Zähler und Aggregationen von der Anwendung führen zu lassen, verworfen.

Das Datenmodell, das im Rahmen dieses Projekts erstellt wurde, ist zukunftsfähig und ist auch für Features, die aufgrund der harten Zeitbegrenzung des Projekts gestrichen werden mussten, wie die Möglichkeit, mehr als 2 Spieler in einem Spiel zu haben, benutzbar.

# Netzwerk-Dienst
Beim Projekt Quiz Battle handelt es sich um eine strikte REST-Architektur. Bei REST handelt es sich um ein Objektmodell, das beschreibt, wie verteilte Objekte miteinander interagieren können.

Die Struktur der Anwendung ist ressourcenorientiert. So lassen sich viele der Ansichten des Spiels auf die Darstellung der unterliegenden Ressource abbilden.
Jede Ressource besitzt mit ihrer URL eine permanente Bezeichnung, die z. B. mit Lesezeichen auch außerhalb der Anwendung nutzbar ist.
Die Ressourcen, und damit die Spielansichten, sind durch Hyperlinks verknüpft.
Da den URLs in dieser Art des Anwendungsmodell eine enorme Bedeutung zukommt, war es wichtig, diese flexibel zuweisen zu können.
Weil das im Projektauftrag vorgegebene PHP keine andere Zuweisung von URLs ermöglicht als die Verzeichnisstruktur des Servers, musste zu den URL-Rewriting-Fähigkeiten des HTTP-Servers gegriffen werden, um die Anordnung der Dateien, welche schlussendlich ein Implementationsdetail sind, vom Client zu verbergen.
Auch die statischen Ressourcen wie der im Front-End eingesetzten Skripte werden über Rewritten URLs referenziert, die unter anderem die Dateiendungen verbergen, die ebenfalls als Implementationsdetail betrachtet werden.

Da es sich um eine Webanwendung handelt, wird das “Uniform Interface Constraint” in HTTP umgesetzt.
Auf viele der Ressourcen lässt sich mit mehreren HTTP-Methoden, neben GET und POST auch PUT, zugreifen.
Ebenfalls werden viele URLs mit verschiedenen Formaten (JSON und HTML) benutzt, wobei die Auswahl mit HTTP Content Negotiation erfolgt.

# Anmeldung
Sowohl um die von REST vorgeschriebene Zustandslosigkeit zu wahren, als auch um sich von Cross-Site Request Forgeries (CSRF/XSRF) zu schützen, werden keine Cookies und Sitzungen eingesetzt. Stattdessen verwaltet das JavaScript-Front-End die Anmeldedaten selber und gibt sie bei Bedarf in eigenen Anfragen mit.
Während das benutzte Authentifikationsschema der Basic Authentification ähnelt, wurde eine andere Bezeichnung gewählt, um nicht durch automatische Speicherung durch den Browser wieder Möglichkeiten zu CSRF zu öffnen.
Wie bei jeder symmetrischen Authentifikation ist für die Sicherheit dieses Verfahrens eine verschlüsselte Verbindung nötig. Dies liegt allerdings außerhalb der Abgrenzung dieses Projekts.
